<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="java" deleted="false" description="ctinney //creates an slf4j logger" enabled="true" name="createlogger">${:import(org.slf4j.Logger,org.slf4j.LoggerFactory)}private static final Logger LOG = LoggerFactory.getLogger(${enclosing_type}.class);</template><template autoinsert="true" context="java" deleted="false" description="ctinney // creates a new session using initialized variables; imports added if necessary" enabled="true" name="createsession">${:import(com.rossvideo.common.hibernate.provider.DatabaseProvider, com.rossvideo.common.hibernate.registry.ContextRegistry, &#13;
com.rossvideo.common.hibernate.utils.HibernateTransaction, com.rossvideo.common.utils.osgi.ServiceHelper)}final String context = ContextRegistry.getContextProvider().getContextName();&#13;
final DatabaseProvider databaseProvider = (DatabaseProvider) ServiceHelper.getService(DatabaseProvider.class);&#13;
final SessionFactory sessionFactory = databaseProvider.getSessionFactory(context);  &#13;
&#13;
try {&#13;
&#13;
	new HibernateTransaction&lt;Void&gt;(sessionFactory) {&#13;
&#13;
		@Override&#13;
		public Void doTransaction(Session session) throws Exception {&#13;
			return null;							&#13;
		}&#13;
						&#13;
	}.execute();&#13;
					&#13;
} catch (Exception e) {					&#13;
	LOG.error(".", e);			&#13;
		&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="ctinney // retrieves the sessionfactory using default context" enabled="true" name="getsessionfactory">${:import(com.rossvideo.common.hibernate.provider.DatabaseProvider, com.rossvideo.common.hibernate.registry.ContextRegistry, &#13;
org.hibernate.SessionFactory, com.rossvideo.common.utils.osgi.ServiceHelper)}String context = ContextRegistry.getContextProvider().getContextName();&#13;
DatabaseProvider databaseProvider = (DatabaseProvider) ServiceHelper.getService(DatabaseProvider.class);&#13;
SessionFactory sessionFactory = databaseProvider.getSessionFactory(context);</template><template autoinsert="true" context="java" deleted="false" description="ctinney // generate getter method" enabled="true" name="getter">public ${return_type} get${Field}() {&#13;
	return ${field};&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="ctinney // logs an exception to error" enabled="true" name="logerror">LOG.error("${cursor}", e);</template><template autoinsert="true" context="java" deleted="false" description="ctinney // creates a new transaction using initialized variables; imports added if necessary" enabled="true" name="newtransaction">${:import(com.rossvideo.common.hibernate.provider.DatabaseProvider, com.rossvideo.common.hibernate.registry.ContextRegistry, &#13;
com.rossvideo.common.hibernate.utils.HibernateTransaction, com.rossvideo.common.utils.osgi.ServiceHelper)}&#13;
&#13;
final String context = ContextRegistry.getContextProvider().getContextName();&#13;
final DatabaseProvider databaseProvider = (DatabaseProvider) ServiceHelper.getService(DatabaseProvider.class);&#13;
final SessionFactory sessionFactory = databaseProvider.getSessionFactory(context);  &#13;
&#13;
try {&#13;
&#13;
	new HibernateTransaction&lt;Void&gt;(sessionFactory) {&#13;
&#13;
		@Override&#13;
		public Void doTransaction(Session session) throws Exception {&#13;
			return null;							&#13;
		}&#13;
						&#13;
	}.execute();&#13;
					&#13;
} catch (Exception e) {					&#13;
	LOG.error(".", e);			&#13;
		&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="ctinney // generate a setter for HibernateObjects " enabled="true" name="setter">public void set${Field}(${elemType} ${field}) {&#13;
	setDirty(this.${field}, ${field}, "${field}", ${field});&#13;
	this.${field} = ${field};&#13;
}</template></templates>